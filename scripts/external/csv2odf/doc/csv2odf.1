.TH "csv2odf" "1" "July 2014" "Larry Jordan" "Text Processing"
.SH "NAME"
.LP
csv2odf \- convert csv files to open document format
.SH "SYNTAX"
.LP
csv2odf [\fIoption\fP] [<\fIcsvfile\fP>] <\fItemplatefile\fP> [<\fIoutputfile\fP>]
.SH "DESCRIPTION"
.LP
csv2odf is a command line tool that can convert a \fIcomma separated value\fR (csv) file into an ods, odt, html, xlsx, or docx document.  csv2odf is useful for creating reports from databases and other data sources that produce csv files.  csv2odf can be combined with cron and shell scripts to automatically generate business reports.
.LP
The csv data is merged with a \fItemplate\fR file to produce the output file. The template can be a spreadsheet file (ods or xlsx) or a document file (odt or docx), as produced by OpenOffice.org, LibreOffice, or Word. The template can also be an html file.
.LP
The first row of the table will be treated as a header row.  (Override with \-H)  The formatting in the second row of cells will be applied to each data cell of the output file.  If the \-a option is used, data will be appended below the last existing row, formatting from the last row will be applied to cells in each new row.
.LP
If the template is a \fIspreadsheet\fR, the second row should contain some data of similar type to the incoming data so that numbers/text/dates can be correctly identified.
.LP
If the template is a \fIdocument\fR, it must contain a table that the csv data will be inserted into.  If the first table in the file is not the target, use the \-t options to identify the table number.
.LP
If the template is an \fIhtml\fR file, it must contain a table or div tags  that the csv data will be inserted into.  If the first table in the file is not the target, use the \-t options to identify the table number or table id property.  The table may be made using div tags if the \-\-div options is used, in which case a div tag must enclose each cell, each row, and the entire table.
.LP
If a csv input file is not specified, input will be taken from standard input (stdin).  If an output file is not specified, output will be directed to standard output (stdout).  This allows the use of the command in pipes.
.LP
In the header or footer of the template, you can insert a \fI[csv2odf-date]\fR tag ("csv2odf-date" enclosed in square brackets).  The date tag will be replaced by the current date.  The date format can be changed using format codes (see below), for example [csv2odf-date %Y\-%m\-%d] will produce a date like 2008\-02\-04.  A date with a day offset from the current date can be created by using +n or \-n, for example [csv2odf-date\-1] would insert the date before today.
.LP
The options may be placed in the template file.  To do this, put "csv2odf:" (without quotes) followed by the options in the first cell (cell A1).  Note the first row will be deleted when it contains options.
.SH "OPTIONS FOR PROCESSING CSV DATA FILE"
.TP
\fB\-c\fR <\fIchar\fR>
use \fIchar\fR as delimiter instead of comma.  \\t will indicate a tab as the dilimiter.
.TP
\fB\-o\fR <\fIspec\fR>
specify column order: 2,1,3 = second csv column will be first column in the output.  Also use to leave unchanged the contents of a template column: 1,2,,3,4 = the 3rd template column is not overwritten.  Useful if a column contains a formula.  The formula cell references will be offset to the correct row.
.TP
\fB\-s\fR <\fIn\fR>
start reading at the nth row of the csv file
.TP
\fB\-e\fR <\fIn\fR>
end reading at the nth row of the csv file
.TP
\fB\-d\fR <\fIfmt\fR>
date format within csv data is specified by \fIfmt\fR string, see \-D for codes.  For columns identified as dates, the program will attempt to translate incoming data into the native date coding using the format supplied with the \-d option.  If the translation fails, it data will be inserted as text.  In ods files, the program knows which columns are dates by looking for date formatted cells in the template.  In xlsx files you must mark date cells with the text [csv2odf-date] (csv2odf-date inside square brackets).
.TP
\fB\-E\fR <\fIencoding\fR>, \fB\--csv-encoding=\fR<\fIencoding\fR>
specify the encoding used in the csv file.  A list of available encoding names can be found at https://docs.python.org/3/library/codecs.html#standard-encodings.
.TP
\fB\--default-csv-encoding\fR
display the default encoding for csv files.  This value is system dependent.
.SH "OPTIONS FOR PROCESSING TEMPLATE FILE"
.TP
\fB\-H\fR
insert the first csv row into the header
.TP
\fB\-S\fR <\fIn\fR>
skip the first n rows of the template file, the header will be the next row after those skipped
.TP
\fB\-t\fR <\fIn\fR>
specify which tab or table to add data to, default first table.  For html files, \-t may be followed by a name to match to table id property.
.TP
\fB\-a\fR
append csv data to the end of existing data
.TP
\fB\--comment=\fR<\fitext\fR>
replace [csv2odf-comment] within the document with <text>
.TP
\fB\--div\fR
search for <div> tags instead of <table> (html files only).  <div> tags must be nested with levels for table, row, and cell.
.TP
\fB--template-stdin-ods\fR
The template will be passed to std-in and it's format will be ods
.TP
\fB--template-stdin-odt\fR
The template will be passed to std-in and it's format will be odt
.TP
\fB--template-stdin-html\fR
The template will be passed to std-in and it's format will be html
.TP
\fB--template-stdin-xlsx\fR
The template will be passed to std-in and it's format will be xlsx
.TP
\fB--template-stdin-docx\fR
The template will be passed to std-in and it's format will be docx
.SH "GENERAL OPTIONS"
.TP
\fB\-h\fR
displays help information
.TP
\fB\-v\fR
verbose mode
.TP
\fB\-D\fR
show a list of date format codes (see below)
.TP
\fB\-q\fR
suppress all warning messages
.TP
\fB\-x\fR
create an xml output file instead of odf
.TP
\fB\-n\fR
do not merge the data into output, use with \-x to extract template xml codes
.TP
\fB\--input=\fR<\fIfile\fR>
specify the csv data file location
.TP
\fB\--template=\fR<\fIfile\fR>
specify the tempate file location
.TP
\fB\--output=\fR<\fIfile\fR>
specify the output file location
.TP
\fB\-V\fR
display version number
.TP
\fB\-z\fR
display debugging information
.SH "DATE FORMAT CODES"
.LP
The date format codes are the same ones used by Python's \fIstrftime\fR function.
.LP
%a   Locale's abbreviated weekday name.
.br
%A   Locale's full weekday name.
.br
%b   Locale's abbreviated month name.
.br
%B   Locale's full month name.
.br
%c   Locale's appropriate date and time representation.
.br
%d   Day of the month as a decimal number [01\-31].
.br
%H   Hour (24\-hour clock) as a decimal number [00\-23].
.br
%I   Hour (12\-hour clock) as a decimal number [01\-12].
.br
%j   Day of the year as a decimal number [001\-366].
.br
%m   Month as a decimal number [01\-12].
.br
%M   Minute as a decimal number [00\-59].
.br
%p   Locale's equivalent of either AM or PM.
.br
%S   Second as a decimal number [00\-61].
.br
%U   Week number of the year (Sunday as the first day of the week)
        as a decimal number [00\-53]. All days in a new year preceding
        the first Sunday are considered to be in week 0
.br
%w   Weekday as a decimal number [0(Sunday)\-6].
.br
%W   Week number of the year (Monday as the first day of the week)
        as a decimal number [00\-53]. All days in a new year preceding
        the first Monday are considered to be in week 0.
.br
%x   Locale's appropriate date representation.
.br
%X   Locale's appropriate time representation.
.br
%y   Year without century as a decimal number [00\-99].
.br
%Y   Year with century as a decimal number.
.br
%Z   Time zone name (no characters if no time zone exists).
.br
%%   A literal "%" character.
.SH "EXAMPLES"
.LP
Insert data into a spreadsheet:
.IP
\fBcsv2odf data.csv template.ods output.ods\fR
.LP
Insert data into an LibreOffice text document:
.IP
\fBcsv2odf data.csv template.odt output.odt\fR
.LP
Specify format for dates in the csv file:
.IP
\fBcsv2odf \-d "%m/%d/%y %H:%M" data.csv template.ods output.ods\fR
.LP
Dates in the csv file can be almost any format.  You can tell the program the format to be expected with the \-d option.  In ods files, the program knows which columns are dates by looking for date formatted cells in the template.  In xlsx files, format the date then mark the cell with the text [csv2odf-date] (csv2odf-date inside square brackets).
.LP
The csv file has a header on the first row:
.IP
\fBcsv2odf \-H data.csv template.ods output.ods\fR
.LP
When the csv file has column names on the first row, \-H will cause the column name to be put into the header of the output file.
.LP
The csv file has a header but we don't want to use it:
.IP
\fBcsv2odf \-s 2 data.csv template.ods output.ods\fR
.LP
This will use data from the csv file beginning with the second row.
